import numpy as np
import copy
import glob
import os
import sys

from .Trial import Trial
from .AbstractFileWrapper import AbstractFileWrapper

class Experiment(AbstractFileWrapper):
    '''
    Decorator for a '.dat' file. To construct use the :func:`lens_analysis.load <mirage.lens_analysis.load>` function, or from indexing or for-looping through a :class:`DirectoryMap <mirage.lens_analysis.DirectoryMap>` instance.

    This class provides simple ways to describe the data generated by a simulation. Can print the description of the experiment, gives access to the parameters of the system, and indexing into it returns specific trials in the form of a :class:`Trial <mirage.lens_analysis.Trial>` instances.
    '''


    def __init__(self, filepath, fileobject=None,params=None,lookuptable=[]):
        '''
        Constructor
        '''
        AbstractFileWrapper.__init__(self,filepath,fileobject,params,lookuptable)
        self.__index = 0
        

    
    def __next__(self):
        if self.__index < len(self._lookupTable):
            ret =  Trial(self._filepath,self.__index,self._fileobject,self._params,self._lookupTable)
            self.__index += 1
            return ret 
        else:
            self.__index = 0
            raise StopIteration
            
    def __getitem__(self,ind):
        if isinstance(ind,int):
            if ind < len(self._lookupTable):
                return Trial(self._filepath,ind,self._fileobject,self._params,self._lookupTable)
            else:
                raise IndexError("Index out of range.")
        else:
            raise ValueError("Index must be of type int")

    def __len__(self):
        return len(self._lookupTable)
        



    @property
    def size(self):
        '''
        Returns the number of trials in the experiment.
        '''
        return len(self)
    
    @property
    def length(self):
        '''
        See :func:`size`.
        '''
        return len(self)

    @property
    def numTrials(self):
        '''
        See :func:`size`.
        '''
        return self.length
        
        
    
    def __iter__(self):
        return Experiment(self._filepath,self._fileobject,self._params,self._lookupTable)
