def getPlotOfTops(dataframe,tops,histogram=True):
         uniques_sorted = np.sort(dataframe['height'].unique())[::-1][0:tops]
         dfUniques = pd.DataFrame(uniques_sorted,columns=['height'])
         dataf2 = pd.merge(dfUniques,dataframe,on='height')
         stats = dataf2.groupby('radius').describe()
         mean = stats['abs_dif']['mean']/300
         stddev = stats['abs_dif']['std']/300
         print("With " + str(mean.count()) + " samples")
         x = np.linspace(5,40,20)
         if histogram:
             hist = dataf2.hist('abs_dif',by='radius',bins=50,sharex=True)
             plt.figure()
         plt.errorbar(x,mean,yerr=stddev,fmt='o')


for key,listOfArrays in retmap.items():      
    difmap[key] = []               
    ref_data = listOfArrays[0]             
    for arr in listOfArrays:
        difmap[key].append(ref_data - arr)


for k,v in difmap.items():                   
    ref_inds = retmap[k][0]        
    radii = np.linspace(5,40,20)           
    ref_data = np.load(k)[0]
    for i in range(len(v)):               
        r = radii[i]        
        for j in range(len(v[i])):                           
            index = retmap[k][i][j]
            peak_height = ref_data[retmap[k][0][j]]
            diff = v[i][j]
            m = {'filename':k,'radius':r,'index':index,'peak_height':peak_height,'difference':diff}
            tups.append(m)
tuples = list(map(lambda x:tuple(x.values()),tups))